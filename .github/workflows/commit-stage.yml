name: Commit Stage

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.editorconfig'
      - '.gitignore'
      - '.sdkmanrc'
      - '*.adoc'
      - '*.png'
      - '*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.md'
      - '.github/*.yml'
      - '.github/*.yaml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: thomasvitale/policy-demo
  VERSION: ${{ github.sha }}

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Check out source code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          java-version: 23
          distribution: 'graalvm'
      
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@06832c7b30a0129d7fb559bcc6e43d26f6374244 # v4.3.1
      
      - name: Compile and test
        run: |
          cd policies/gradle
          ./gradlew clean build
      
      - name: SBOM vulnerability scanning
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4 # master
        with:
          scan-type: 'sbom'
          scan-ref: 'policies/gradle/build/reports/application.cdx.json'
          format: 'sarif'
          output: 'trivy-results-build.sarif'

      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@d6bbdef45e766d081b84a2def353b0055f728d3e # v3.29.3
        if: success() || failure()
        with:
          sarif_file: 'trivy-results-build.sarif'
          category: build
      
      - name: Package as OCI image
        run: |
          cd policies/gradle
          ./gradlew bootBuildImage --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      
      - name: Authenticate with the container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.IMAGE_PUSH_TOKEN }}
          registry: ${{ env.REGISTRY }}

      - name: Publish OCI image
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
  
  sign:
    name: Sign
    runs-on: ubuntu-24.04
    needs: [ build ]
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      image-digest: ${{ steps.image-info.outputs.digest }}
      image-name: ${{ steps.image-info.outputs.name }}
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1.7
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.IMAGE_PUSH_TOKEN }}
          registry: ${{ env.REGISTRY }}

      - name: Fetch OCI image
        run: podman pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: Get OCI image digest
        id: image-info
        run: |
          image_digest=$(podman inspect --format='{{.Digest}}' ${REGISTRY}/${IMAGE_NAME}:${VERSION})
          echo $image_digest
          echo "IMAGE_DIGEST=${image_digest}" >> $GITHUB_ENV
          echo "digest=${image_digest}" >> $GITHUB_OUTPUT
          echo "name=${REGISTRY}/${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Sign image
        run: |
          cosign sign --yes "${REGISTRY}/${IMAGE_NAME}@${IMAGE_DIGEST}"

  provenance:
    needs: [ sign ]
    permissions:
      actions: read
      id-token: write
      packages: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.sign.outputs.image-name }}
      digest: ${{ needs.sign.outputs.image-digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.IMAGE_PUSH_TOKEN }}
